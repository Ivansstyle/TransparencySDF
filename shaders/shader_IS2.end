

      return pos;
}

// Old map func
vec4 map(vec3 _position)
{
   vec4 pos = vec4(4.0, 3.0, 4.0, 0.0);

   return pos;
}

// Ray for tracing // No need to edit 
mat2x3 createRay(vec3 _origin, vec3 _lookAt, vec3 _upV, vec2 _uv, float _fov, float _aspect)
{
  mat2x3 ray;
  vec3 direction, rayUpV, rightV;
  vec2 uv;
  float fieldOfViewRad;

  ray[0] = _origin;
  direction = normalize(_lookAt - _origin);
  rayUpV = normalize( _upV - direction * dot(direction, _upV));
  rightV = cross(direction, rayUpV);
  uv = _uv * 2 - vec2(1.);
  fieldOfViewRad = _fov * 3.1415 / 180;

  ray[1] = direction + tan(fieldOfViewRad / 2.f) * rightV * uv.x + tan(fieldOfViewRad / 2.f) / _aspect * rayUpV * uv.y;
  ray[1] = normalize(ray[1]);

  return ray;
}

// Sphere tracing the rays with sphrere tracing algorithm 
// NOT REALLY LIKE THAT
/**
 * Ambient occlusion is based on a shadertoy example by Inigo Quilez
 * [Accessed January 2017] Available from: https://www.shadertoy.com/view/Xds3zN
 */
float calcAO(vec3 _position, vec3 _normal)
{
  float occ = 0.0;
  float sca = 1.0;
  for(int i = 0; i < 5; i++)
  {
    float hr = 0.01 + 0.12*float(i)/4.0;
    vec3 aopos = _normal * hr + _position;
    float dd = map(aopos).x; // Map is here! (AO map)
    occ += -(dd-hr)*sca;
    sca *= 0.95;
  }
  return clamp(1.0 - 3.0*occ, 0.0, 1.0);
}

/**
 * The sky rendering is based on a shadertoy example by Inigo Quilez
 * [Accessed January 2017] Available from: https://www.shadertoy.com/view/4ttSWf
 */
vec3 renderSky(mat2x3 _ray)
{
  // background sky
  vec3 col = 0.9*vec3(0.4, 0.65, 1.0) - _ray[1].y*vec3(0.4, 0.36, 0.4);

  // sun glare
  float sun = clamp(dot(normalize(SunLight.pos), _ray[1]), 0.0, 1.0);
  col += 0.6*vec3(1.0, 0.6, 0.3)*pow(sun, 32.0);

  return col;
}


// No map needed
vec3 applyFog(vec3 color, float distance)
{
  float fogAmount = 1.0 - exp(-distance*2);
  vec3 fogColor = vec3(0.4, 0.65, 1.0);
  return mix(color, fogColor, fogAmount);
}


float softshadow(vec3 ro, vec3 rd, float mint, float tmax)
{
  float res = 1.0;
  float t = mint;
  for(int i = 0; i < 16; ++i)
  {
    float h = Tmap(ro + normalize(rd)*t)[0].x; // Map is here!
    res = min(res, 8.0*h/t);
    t += clamp(h, 0.02, 0.10);
    if(h < traceprecision || t > tmax)
      break;
  }
  return clamp(res, 0.0, 1.0);
}


// --------------------- TRANSPARENCY RENDERING ----------------------------------
  


// Volume Marching and sampling
vec4 marchVolume(mat2x3 _ray, TraceResult _tr) // Returns opacity of the pixel
{
    int samples = 256; // Amount of transparency samples
    float tmax = 20.f; // MAX RAY DISTANCE
    vec3 col = vec3(0.001f); // color 
    float s_transparency = 0.001f; // sample transparency 


    // Setting a ray for the forward volume marching
    mat2x3 f_ray = _ray;
    vec3 f_hitpoint = f_ray[0] + _tr.d * f_ray[1]; // CORRECT

    // Setting a ray for the reversed 
    vec3 bEye = _ray[0] +  _ray[1] * tmax; 
    vec3 bDir = normalize(-_ray[1]); 
    mat2x3 b_ray = mat2x3(bEye, bDir); // Eye moved to the tmax                                       
    vec3 b_hitpoint = b_ray[0] + _tr.bd * b_ray[1]; // CORRECT


    // Vector representing a vector from forwards hitpoint to backwards hitpoint 
    vec3 marchvector = -(f_hitpoint - b_hitpoint);

    // The length of the ray sampling the object 
    float marchsize = length(marchvector); // need to check 

    vec3 samplevector = marchvector / (float)samples;

    // How big are the samples
    //float samplestep = 1 / (float)samples;
    
    // We start at the forward tracing hitpoint
    vec3 startpoint = f_hitpoint; 


    vec3 sum=vec3(0.0f);
    float avg_transparency=0.001f; 
    
    int miss = 0; // Amount of misses (discarded samples)
    
    for(int i = 0; i < samples; ++i) // Volume march
    { 
      
      // We go trough the object by 
      vec3 samplepoint = startpoint + samplevector * i; 
      
      // Color sample
      vec3 s_col=vec3(0.0f);

      // Transparency sample
      float s_transparency = 0.001f; 

      // Sample 
      mat2x3 s = Tmap(samplepoint);
    
      if(s[0].x>0.0f)
      {
        // Outside        
        s_col = vec3(0.0f); 
        s_transparency = 0.0f; 
        +miss;
        
      }else{ // Inside        
        s_col = s[1];
        s_transparency=s[0].y;
      }
        avg_transparency += s_transparency; 
        sum+=s_col * s_transparency;
    }
    
    // Calculate pixel color | something is really wrong Â¬ still is completely wrong 2020.Jan
    vec3 color = normalize(sum/vec3(avg_transparency)); 
    float transparency = avg_transparency/(float)samples-miss; 

    // Polishing up and packing
    vec4 result; 

    // Cumulative correction 
    transparency = transparency * 10.0f; 
    //Calculating final pixel value 
    result = vec4(vec3(transparency), 1.f);
    result = vec4(color, transparency);
    //result = vec4(color, 1.0f);
    //Testing Misses alone
    //float contrast = 1.8f; 
    //result = vec4(color, clamp(((float)miss/(float)samples)*contrast,0.0f,1.0f)); // Use trace.o in rendering
    
    //Testing color alone 
    //result = vec4(color, 1.0f);

      return result;
}


TraceResult TcastRay(mat2x3 _ray)
{
  TraceResult trace; // Forward Tracing
  trace.t =   1.f;
  trace.bt =  1.f;
  float tmax = 20.f;
  int numSamples = 64; 

  // Forward raycasting  0------------>@------------------
  for(int i = 0; i < numSamples; ++i)
  {
    mat2x3 r = Tmap(_ray[0] + trace.t * _ray[1]);
    trace.d = r[0].x;

    // CalculateOpacity
    if(trace.d <= traceprecision) {
     break; // Hit
    }
    else if(trace.t > tmax) break;
   trace.t += trace.d; // Add
  }

  // Backwards raycasting --------------@<----------------0 
  // Revesed ray set
  vec3 bEye = _ray[0] +  _ray[1] * tmax; 
  vec3 bDir = normalize(-_ray[1]); 
  mat2x3 bray = mat2x3(bEye, bDir); // Eye moved to the tmax
                                       
  // Tracing backwards
  for(int i = 0; i < numSamples; ++i) // We use 64 samples at this point 
  {
    mat2x3 r = Tmap(bray[0] + trace.bt * bray[1]); // create a ray from backwards ray to 
    trace.bd = r[0].x;

    if(trace.bd <= traceprecision) {
      break;
    }
    else if(trace.t > tmax) break;
   trace.bt += trace.bd; // Backtrace marker make a step 
  }

 // Sampling inside the object
  vec4 data = marchVolume(_ray, trace);
  trace.color = data.xyz;
  trace.o = data.w;

  return trace; // Opacity returns here
}


vec3 TcalcNormal(vec3 _position) // Why you so strange normal
{
  vec3 offset = vec3(0.0005, -0.0005, 1.0);
  vec3 normal = normalize(offset.xyy*Tmap( _position + offset.xyy )[0].x +
                          offset.yyx*Tmap( _position + offset.yyx )[0].x +
                          offset.yxy*Tmap( _position + offset.yxy )[0].x +
                          offset.xxx*Tmap( _position + offset.xxx )[0].x);
  return normalize(normal);
}

// Rendering function // WIP for transparency
vec3 Trender(mat2x3 _ray)
{
  TraceResult trace = TcastRay(_ray); // 1st RayCast

  vec3 skyCol = renderSky(_ray);
  vec3 col = skyCol;

  //trace.o = 1.f; // FOR TESTING

  if(trace.d <= traceprecision) // We are on the object
  {
    vec3 p = _ray[0] + trace.t * _ray[1]; // !!! SURFACE !!!
    vec3 n = TcalcNormal(p);
    vec3 reflection = reflect(_ray[1], n);
    float intensitySum = 0.f;
    
    // Color with transparency
    col = trace.color; 
    col = col * trace.o + skyCol * (1.f - trace.o);

    for(int i = 0; i < 4; ++i) {

      vec3 lightDir = normalize(Lights[i].pos - p);

      float diffuse = clamp(dot(n, lightDir), 0.0, 1.0) * softshadow(p, Lights[i].pos, 0.02, 2.5);
      float ambient = clamp(0.5 + 0.5*n.y, 0.0, 1.0);
      float occlusion = calcAO(p, n) * trace.o;

      float specular = pow(clamp(dot(reflection, lightDir), 0.0, 1.0 ), 16.0);

      vec3 acc = vec3(0.0);
      acc += 1.40 * diffuse * Lights[i].diffuse;
      acc += 1.20 * ambient * Lights[i].ambient * occlusion;
      if(i == 0)
        acc += 2.00 * specular * Lights[i].specular * diffuse;


      col += trace.color * acc * Lights[i].intensity; // Apply lights

     
      col += 0.01f * acc * Lights[i].intensity;
      intensitySum += Lights[i].intensity;
    }
    col /= intensitySum;
    // opacity ???
    col = applyFog(col, trace.t/150.f);

    // Vigneting
    vec2 q = o_FragCoord.xy / u_Resolution.xy;
    col *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.25 );


    // Final pixel color composition 
    col = clamp(col*trace.o + skyCol * (1.f - trace.o),0.0,1.0);// Testing !
    
    // Testing color only
    //col = trace.color;

    // Testing opacity only 
    //col = vec3(clamp(trace.o,0.0,1.0));
  }

  return vec3( clamp(col, 0.0, 1.0) );
}

// --------------------- TRANSPARENCY RENDERING END ----------------------------------

void main()
{
  vec3 cameraPosition = u_Camera;
  vec3 upVector = u_CameraUp;
  vec3 lookAt = vec3(0.f);
  float aspectRatio = u_Resolution.x / u_Resolution.y;

  mat2x3 ray = createRay(cameraPosition, lookAt, upVector, o_FragCoord, 90.f, aspectRatio);
  vec3 color = Trender(ray);

  // Gamma correction NOT
  o_FragColor = vec4(pow(color, vec3(0.4545)), 1.f);
  //o_FragColor = vec4(color, 1.f);
}


/* ---------------------------- TRASHBIN -----------------------------------
// // Rendering function


  TraceResult castRay(mat2x3 _ray)
{
  TraceResult trace;
  trace.t = 1.f;
  float tmax = 20.f;
  for(int i = 0; i < 64; ++i) // 64 - max iterations 
  {
    vec4 r = Tmap(_ray[0] + trace.t * _ray[1]);
    trace.d = r.x;
    trace.color = r.yzw;
    // CalculateOpacity HOW?
    trace.o = 0.5f; // Testing
    if(trace.d <= traceprecision || trace.t > tmax) {
      break;
    }
    trace.t += trace.d;
  }
  return trace;
}

vec3 calcNormal(vec3 _position)
{
  vec3 offset = vec3(0.0005, -0.0005, 1.0);
  vec3 normal = normalize(offset.
                          xyy*map( _position + offset.xyy ).x +
                          offset.yyx*map( _position + offset.yyx ).x +
                          offset.yxy*map( _position + offset.yxy ).x +
                          offset.xxx*map( _position + offset.xxx ).x);
  return normalize(normal);
}

  // For trace check purposes 
  if (abs(trace.t -trace.bt) < 1e-3) 
  {
    trace.color = vec3(1.0f, 0.0f,0.0f);
  }
  else{
    float c = abs(trace.bt-trace.t)/30.0f;
    c = 1.0f-clamp(c, 0.0f, 1.0f);
    trace.color = vec3(c);
  }

// vec3 render(mat2x3 _ray)
// {
//   TraceResult trace = castRay(_ray); // 1st RayCast
//   vec3 col = renderSky(_ray); 

//   if(trace.d <= traceprecision)
//   {
//     vec3 p = _ray[0] + trace.t * _ray[1]; // !!! SURFACE !!!
//     vec3 n = calcNormal(p);
//     vec3 reflection = reflect(_ray[1], n);
//     float intensitySum = 0.f;
//     col = vec3(0.0);

//     for(int i = 0; i < 4; ++i) {

//       vec3 lightDir = normalize(Lights[i].pos - p);

//       float diffuse = clamp(dot(n, lightDir), 0.0, 1.0) * softshadow(p, Lights[i].pos, 0.02, 2.5);
//       float ambient = clamp(0.5 + 0.5*n.y, 0.0, 1.0);
//       float occlusion = calcAO(p, n);
//       float specular = pow(clamp(dot(reflection, lightDir), 0.0, 1.0 ), 16.0);

//       vec3 acc = vec3(0.0);
//       acc += 1.40 * diffuse * Lights[i].diffuse;
//       acc += 1.20 * ambient * Lights[i].ambient * occlusion;
//       if(i == 0)
//         acc += 2.00 * specular * Lights[i].specular * diffuse;

//       col += trace.color * acc * Lights[i].intensity;
//       intensitySum += Lights[i].intensity;
//     }
//     col /= intensitySum;
//     col = applyFog(col, trace.t/150.f);

//     // Vigneting
//     vec2 q = o_FragCoord.xy / u_Resolution.xy;
//     col *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.25 );
//   }
//   return vec3( clamp(col, 0.0, 1.0) );
// }


// if (abs(trace.t -trace.bt) < 1e-3) 
// {
//   trace.color = vec3(1.0f, 0.0f,0.0f);
// }
// else{
//   float c = abs(trace.bt-trace.t)/30.0f;
//   //c = 1.0f-clamp(c, 0.0f, 1.0f);
//   trace.color = vec3(c);
// }
  
//TraceResult castRay(mat2x3 _ray)
//{
//TraceResult trace;
//trace.t = 1.f;
//float tmax = 20.f;
//for(int i = 0; i < 64; ++i)
//{
//  vec4 r = map(_ray[0] + trace.t * _ray[1]);
//  trace.d = r.x;
//  trace.color = r.yzw;
//  if(trace.d <= traceprecision || trace.t > tmax) {
//    break;
//  }
//  trace.t += trace.d;
//}


    // // Adaptive step // Using tmax preprogrammed
    // float step = (20.0f - (_tr.bd - _tr.d)) / TRANSPARENCY_SAMPLES;
    // //float step = 0.1f;
    // int hits = 0;
    // float lastT = 1.1f;
0
    // // Sampling transparency (wro0ng now)
    // for (int i = 0; i < TRANSPARE0NCY_SAMPLES; ++i)
    // {0
    //     mat2x3 r = Tmap(tray[0] +0 float(i) * step * tray[1]);
0
    //     if (r[0].x < 0)0
    //     {0
    //         col += r[1].xyz * r[00].y;
    //         transparency += 0.10f0;//r[0].y;
    //         transparency = min(r[0].y, lastT);
    //         lastT = r[0].y;
    //         ++hits;
    //     }
    //     if (transparency / float(i) >= 1.0f) {break;} // We are in non transparent object

//  // Break if we outside object
//     }
//     col /= float(hits);
//     transparency /= float(hits);
//     col = vec3(transparency);

//     //col = vec3(transparency);


*/